{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["UploadComponent","props","id","type","onChange","onUrlChange","value","url","key","withIcon","singleImage","withPreview","label","buttonText","onImage","imgExtension","maxFileSize","App","useState","progress","setProgress","undefined","setImageURL","errorMessage","setErrorMessage","e","target","failedImages","successImages","a","console","log","parts","split","mime","name","data","Axios","put","image","res","imageURL","message","className","src","alt","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6TAMMA,G,MAAkB,SAAAC,GAAK,OACzB,8BACI,kDAEI,2BAAOC,GAAG,WAAWC,KAAK,OAAOC,SAAUH,EAAMI,YAAaC,MAAOL,EAAMM,OAE/E,kBAAC,IAAD,CACIC,IAAI,iBACJC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,MAAM,yBACNC,WAAW,kBACXT,SAAUH,EAAMa,QAChBC,aAAc,CAAC,OAAQ,OAAQ,SAC/BC,YAAa,aAmEVC,EA9DH,WAAO,IAAD,EACkBC,mBAAS,aAD3B,mBACPC,EADO,KACGC,EADH,OAEaF,wBAASG,GAFtB,mBAEPd,EAFO,KAEFe,EAFE,OAG0BJ,mBAAS,IAHnC,mBAGPK,EAHO,KAGOC,EAHP,KAKRnB,EAAc,SAAAoB,GAChBH,EAAYG,EAAEC,OAAOpB,QAGnBQ,EAAO,uCAAG,WAAOa,EAAcC,GAArB,uBAAAC,EAAA,yDACPtB,EADO,uBAERuB,QAAQC,IAAI,eACZP,EAAgB,8BAChBJ,EAAY,eAJJ,iCAQZA,EAAY,aARA,SAWRU,QAAQC,IAAI,gBAAiBH,GACvBI,EAAQJ,EAAc,GAAGK,MAAM,KAC/BC,EAAOF,EAAM,GAAGC,MAAM,KAAK,GAC3BE,EAAOH,EAAM,GAAGC,MAAM,KAAK,GAC3BG,EAAOJ,EAAM,GAfX,UAgBUK,IAAMC,IAAI/B,EAAK,CAAE2B,OAAMC,OAAMI,MAAOH,IAhB9C,QAgBFI,EAhBE,OAkBRlB,EAAYkB,EAAIJ,KAAKK,UACrBrB,EAAY,YAnBJ,kDAqBRU,QAAQC,IAAI,kBAAZ,MACAP,EAAgB,KAAMkB,SACtBtB,EAAY,eAvBJ,0DAAH,wDA6Cb,OACI,yBAAKuB,UAAU,OACX,oDApBQ,WACZ,OAAQxB,GACJ,IAAK,YACD,OAAO,kBAAC,EAAD,CAAiBd,YAAaA,EAAaS,QAASA,EAASP,IAAKA,IAC7E,IAAK,YACD,OAAO,6CACX,IAAK,WACD,OAAO,yBAAKqC,IAAKrC,EAAKsC,IAAI,aAC9B,IAAK,cACD,OACI,oCACI,gDAAsBtB,GACtB,kBAAC,EAAD,CAAiBlB,YAAaA,EAAaS,QAASA,EAASP,IAAKA,MAS7EuC,KCvEOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMtB,c","file":"static/js/main.e3e5584b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport Axios from 'axios';\n\nimport './App.css';\n\nconst UploadComponent = props => (\n    <form>\n        <label>\n            File Upload URL:\n            <input id=\"urlInput\" type=\"text\" onChange={props.onUrlChange} value={props.url}></input>\n        </label>\n        <ImageUploader\n            key=\"image-uploader\"\n            withIcon={true}\n            singleImage={true}\n            withPreview={true}\n            label=\"Maximum size file: 5MB\"\n            buttonText=\"Choose an image\"\n            onChange={props.onImage}\n            imgExtension={['.jpg', '.png', '.jpeg']}\n            maxFileSize={5242880}\n        ></ImageUploader>\n    </form>\n);\n\nconst App = () => {\n    const [progress, setProgress] = useState('getUpload');\n    const [url, setImageURL] = useState(undefined);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const onUrlChange = e => {\n        setImageURL(e.target.value);\n    };\n\n    const onImage = async (failedImages, successImages) => {\n        if (!url) {\n            console.log('missing Url');\n            setErrorMessage('missing a url to upload to');\n            setProgress('uploadError');\n            return;\n        }\n\n        setProgress('uploading');\n\n        try {\n            console.log('successImages', successImages);\n            const parts = successImages[0].split(';');\n            const mime = parts[0].split(':')[1];\n            const name = parts[1].split('=')[1];\n            const data = parts[2];\n            const res = await Axios.put(url, { mime, name, image: data });\n\n            setImageURL(res.data.imageURL);\n            setProgress('uploaded');\n        } catch (error) {\n            console.log('error in upload', error);\n            setErrorMessage(error.message);\n            setProgress('uploadError');\n        }\n    };\n\n    const content = () => {\n        switch (progress) {\n            case 'getUpload':\n                return <UploadComponent onUrlChange={onUrlChange} onImage={onImage} url={url} />;\n            case 'uploading':\n                return <h2>Uploading....</h2>;\n            case 'uploaded':\n                return <img src={url} alt=\"uploaded\" />;\n            case 'uploadError':\n                return (\n                    <>\n                        <div>Error message = {errorMessage}</div>\n                        <UploadComponent onUrlChange={onUrlChange} onImage={onImage} url={url} />\n                    </>\n                );\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Image Upload Website</h1>\n            {content()}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}